// Generated by Avo VERSION 64.1.0, PLEASE EDIT WITH CARE
/* tslint:disable */
/* eslint-disable */

// fetch() polyfill
(function () {
  if (typeof window === 'undefined') {
    return;
  }
  var support = {
    searchParams: 'URLSearchParams' in self,
    iterable: 'Symbol' in self && 'iterator' in Symbol,
    blob:
      'FileReader' in self &&
      'Blob' in self &&
      (function () {
        try {
          new Blob();
          return true
        } catch (e) {
          return false
        }
      })(),
    formData: 'FormData' in self,
    arrayBuffer: 'ArrayBuffer' in self
  };

  function isDataView(obj: any) {
    return obj && DataView.prototype.isPrototypeOf(obj)
  }

  if (support.arrayBuffer) {
    var viewClasses = [
      '[object Int8Array]',
      '[object Uint8Array]',
      '[object Uint8ClampedArray]',
      '[object Int16Array]',
      '[object Uint16Array]',
      '[object Int32Array]',
      '[object Uint32Array]',
      '[object Float32Array]',
      '[object Float64Array]'
    ];

    var isArrayBufferView =
      ArrayBuffer.isView ||
      function (obj) {
        return obj && viewClasses.indexOf(Object.prototype.toString.call(obj)) > -1
      };
  }

  function normalizeName(name: any) {
    if (typeof name !== 'string') {
      name = String(name);
    }
    if (/[^a-z0-9\-#$%&'*+.^_`|~]/i.test(name)) {
      throw new TypeError('Invalid character in header field name')
    }
    return name.toLowerCase()
  }

  function normalizeValue(value: any) {
    if (typeof value !== 'string') {
      value = String(value);
    }
    return value
  }

  // Build a destructive iterator for the value list
  function iteratorFor(items: any) {
    var iterator: any = {
      next: function () {
        var value = items.shift();
        return { done: value === undefined, value: value }
      }
    };

    if (support.iterable) {
      iterator[Symbol.iterator] = function () {
        return iterator
      };
    }

    return iterator
  }

  function Headers(headers: any) {
    // @ts-ignore
    (this as any).map = {};

    if (headers instanceof Headers) {
      (headers as any).forEach(function (value: any, name: any) {
        // @ts-ignore
        this.append(name, value);
        // @ts-ignore
      }, this);
    } else if (Array.isArray(headers)) {
      headers.forEach(function (header: any) {
        // @ts-ignore
        this.append(header[0], header[1]);
        // @ts-ignore
      }, this);
    } else if (headers) {
      Object.getOwnPropertyNames(headers).forEach(function (name: any) {
        // @ts-ignore
        this.append(name, headers[name]);
        // @ts-ignore
      }, this);
    }
  }

  Headers.prototype.append = function (name: any, value: any) {
    name = normalizeName(name);
    value = normalizeValue(value);
    var oldValue = this.map[name];
    this.map[name] = oldValue ? oldValue + ', ' + value : value;
  };

  Headers.prototype['delete'] = function (name: any) {
    delete this.map[normalizeName(name)];
  };

  Headers.prototype.get = function (name: any) {
    name = normalizeName(name);
    return this.has(name) ? this.map[name] : null
  };

  Headers.prototype.has = function (name: any) {
    return this.map.hasOwnProperty(normalizeName(name))
  };

  Headers.prototype.set = function (name: any, value: any) {
    this.map[normalizeName(name)] = normalizeValue(value);
  };

  Headers.prototype.forEach = function (callback: any, thisArg: any) {
    for (var name in this.map) {
      if (this.map.hasOwnProperty(name)) {
        callback.call(thisArg, this.map[name], name, this);
      }
    }
  };

  Headers.prototype.keys = function () {
    var items: any = [];
    this.forEach(function (_value: any, name: any) {
      items.push(name);
    });
    return iteratorFor(items)
  };

  Headers.prototype.values = function () {
    var items: any = [];
    this.forEach(function (value: any) {
      items.push(value);
    });
    return iteratorFor(items)
  };

  Headers.prototype.entries = function () {
    var items: any = [];
    this.forEach(function (value: any, name: any) {
      items.push([name, value]);
    });
    return iteratorFor(items)
  };

  if (support.iterable) {
    Headers.prototype[Symbol.iterator] = Headers.prototype.entries;
  }

  function consumed(body: any) {
    if (body.bodyUsed) {
      return true;
    }
    body.bodyUsed = true;
    return false;
  }

  function fileReaderReady(reader: any) {
    return new Promise(function (resolve: any, reject: any) {
      reader.onload = function () {
        resolve(reader.result);
      };
      reader.onerror = function () {
        reject(reader.error);
      };
    })
  }

  function readBlobAsArrayBuffer(blob: any) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsArrayBuffer(blob);
    return promise
  }

  function readBlobAsText(blob: any) {
    var reader = new FileReader();
    var promise = fileReaderReady(reader);
    reader.readAsText(blob);
    return promise
  }

  function readArrayBufferAsText(buf: any) {
    var view = new Uint8Array(buf);
    var chars = new Array(view.length);

    for (var i = 0; i < view.length; i++) {
      chars[i] = String.fromCharCode(view[i]);
    }
    return chars.join('')
  }

  function bufferClone(buf: any) {
    if (buf.slice) {
      return buf.slice(0)
    } else {
      var view = new Uint8Array(buf.byteLength);
      view.set(new Uint8Array(buf));
      return view.buffer
    }
  }

  function Body() {
    // @ts-ignore
    (this as any).bodyUsed = false;

    // @ts-ignore
    (this as any)._initBody = function (body: any) {
      this._bodyInit = body;
      if (!body) {
        this._bodyText = '';
      } else if (typeof body === 'string') {
        this._bodyText = body;
      } else if (support.blob && Blob.prototype.isPrototypeOf(body)) {
        this._bodyBlob = body;
      } else if (support.formData && FormData.prototype.isPrototypeOf(body)) {
        this._bodyFormData = body;
      } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
        this._bodyText = body.toString();
      } else if (support.arrayBuffer && support.blob && isDataView(body)) {
        this._bodyArrayBuffer = bufferClone(body.buffer);
        // IE 10-11 can't handle a DataView body.
        this._bodyInit = new Blob([this._bodyArrayBuffer]);
      } else if (support.arrayBuffer && (ArrayBuffer.prototype.isPrototypeOf(body) || isArrayBufferView(body))) {
        this._bodyArrayBuffer = bufferClone(body);
      } else {
        this._bodyText = body = Object.prototype.toString.call(body);
      }

      if (!this.headers.get('content-type')) {
        if (typeof body === 'string') {
          this.headers.set('content-type', 'text/plain;charset=UTF-8');
        } else if (this._bodyBlob && this._bodyBlob.type) {
          this.headers.set('content-type', this._bodyBlob.type);
        } else if (support.searchParams && URLSearchParams.prototype.isPrototypeOf(body)) {
          this.headers.set('content-type', 'application/x-www-form-urlencoded;charset=UTF-8');
        }
      }
    };

    if (support.blob) {
      // @ts-ignore
      (this as any).blob = function () {
        var rejected = consumed(this);
        if (rejected) {
          return Promise.reject(new TypeError('Already read'));
        }

        if (this._bodyBlob) {
          return Promise.resolve(this._bodyBlob);
        } else if (this._bodyArrayBuffer) {
          return Promise.resolve(new Blob([this._bodyArrayBuffer]));
        } else if (this._bodyFormData) {
          throw new Error('could not read FormData body as blob');
        } else {
          return Promise.resolve(new Blob([this._bodyText]));
        }
      };

      // @ts-ignore
      (this as any).arrayBuffer = function () {
        if (this._bodyArrayBuffer) {
          if (consumed(this)) {
            return Promise.reject(new TypeError('Already read'));
          } else {
            return Promise.resolve(this._bodyArrayBuffer);
          }
        } else {
          return this.blob().then(readBlobAsArrayBuffer);
        }
      };
    }

    // @ts-ignore
    (this as any).text = function () {
      var rejected = consumed(this);
      if (rejected) {
        return Promise.reject(new TypeError('Already read'));
      }

      if (this._bodyBlob) {
        return readBlobAsText(this._bodyBlob);
      } else if (this._bodyArrayBuffer) {
        return Promise.resolve(readArrayBufferAsText(this._bodyArrayBuffer));
      } else if (this._bodyFormData) {
        throw new Error('could not read FormData body as text');
      } else {
        return Promise.resolve(this._bodyText);
      }
    };

    if (support.formData) {
      // @ts-ignore
      (this as any).formData = function () {
        return this.text().then(decode)
      };
    }

    // @ts-ignore
    (this as any).json = function () {
      return this.text().then(JSON.parse)
    };

    // @ts-ignore
    return this
  }

  // HTTP methods whose capitalization should be normalized
  var methods = ['DELETE', 'GET', 'HEAD', 'OPTIONS', 'POST', 'PUT'];

  function normalizeMethod(method: any) {
    var upcased = method.toUpperCase();
    return methods.indexOf(upcased) > -1 ? upcased : method
  }

  function Request(input: any, options: any) {
    options = options || {};
    var body = options.body;

    if (input instanceof Request) {
      if ((input as any).bodyUsed) {
        throw new TypeError('Already read')
      }
      // @ts-ignore
      (this as any).url = (input as any).url;
      // @ts-ignore
      this.credentials = (input as any).credentials;
      if (!options.headers) {
        // @ts-ignore
        this.headers = new Headers((input as any).headers);
      }
      // @ts-ignore
      this.method = (input as any).method;
      // @ts-ignore
      this.mode = (input as any).mode;
      // @ts-ignore
      this.signal = (input as any).signal;
      if (!body && (input as any)._bodyInit != null) {
        body = (input as any)._bodyInit;
        (input as any).bodyUsed = true;
      }
    } else {
      // @ts-ignore
      this.url = String(input);
    }

    // @ts-ignore
    this.credentials = options.credentials || this.credentials || 'same-origin';
    // @ts-ignore
    if (options.headers || !this.headers) {
      // @ts-ignore
      this.headers = new Headers(options.headers);
    }
    // @ts-ignore
    this.method = normalizeMethod(options.method || this.method || 'GET');
    // @ts-ignore
    this.mode = options.mode || this.mode || null;
    // @ts-ignore
    this.signal = options.signal || this.signal;
    // @ts-ignore
    this.referrer = null;

    // @ts-ignore
    if ((this.method === 'GET' || this.method === 'HEAD') && body) {
      throw new TypeError('Body not allowed for GET or HEAD requests')
    }
    // @ts-ignore
    this._initBody(body);
  }

  Request.prototype.clone = function () {
    // @ts-ignore
    return new Request(this, { body: this._bodyInit })
  };

  function decode(body: any) {
    var form = new FormData();
    body
      .trim()
      .split('&')
      .forEach(function (bytes: any) {
        if (bytes) {
          var split = bytes.split('=');
          var name = split.shift().replace(/\+/g, ' ');
          var value = split.join('=').replace(/\+/g, ' ');
          form.append(decodeURIComponent(name), decodeURIComponent(value));
        }
      });
    return form
  }

  function parseHeaders(rawHeaders: any) {
    // @ts-ignore
    var headers = new Headers();
    // Replace instances of \r\n and \n followed by at least one space or horizontal tab with a space
    // https://tools.ietf.org/html/rfc7230#section-3.2
    var preProcessedHeaders = rawHeaders.replace(/\r?\n[\t ]+/g, ' ');
    preProcessedHeaders.split(/\r?\n/).forEach(function (line: any) {
      var parts = line.split(':');
      var key = parts.shift().trim();
      if (key) {
        var value = parts.join(':').trim();
        headers.append(key, value);
      }
    });
    return headers
  }

  Body.call(Request.prototype);

  function Response(bodyInit: any, options: any) {
    if (!options) {
      options = {};
    }

    // @ts-ignore
    this.type = 'default';
    // @ts-ignore
    this.status = options.status === undefined ? 200 : options.status;
    // @ts-ignore
    this.ok = this.status >= 200 && this.status < 300;
    // @ts-ignore
    this.statusText = 'statusText' in options ? options.statusText : 'OK';
    // @ts-ignore
    this.headers = new Headers(options.headers);
    // @ts-ignore
    this.url = options.url || '';
    // @ts-ignore
    this._initBody(bodyInit);
  }

  Body.call(Response.prototype);

  Response.prototype.clone = function () {
    // @ts-ignore
    return new Response(this._bodyInit, {
      status: this.status,
      statusText: this.statusText,
      // @ts-ignore
      headers: new Headers(this.headers),
      url: this.url
    })
  };

  Response.error = function () {
    // @ts-ignore
    var response = new Response(null, { status: 0, statusText: '' });
    response.type = 'error';
    return response
  };

  var redirectStatuses = [301, 302, 303, 307, 308];

  Response.redirect = function (url: any, status: any) {
    if (redirectStatuses.indexOf(status) === -1) {
      throw new RangeError('Invalid status code')
    }

    // @ts-ignore
    return new Response(null, { status: status, headers: { location: url } })
  };

  (self as any).DOMException = (self as any).DOMException;
  try {
    new (self as any).DOMException();
  } catch (err) {
    (self as any).DOMException = function (message: any, name: any) {
      this.message = message;
      this.name = name;
      var error = Error(message);
      this.stack = error.stack;
    };
    (self as any).DOMException.prototype = Object.create(Error.prototype);
    (self as any).DOMException.prototype.constructor = (self as any).DOMException;
  }

  function fetch(input: any, init: any) {
    return new Promise(function (resolve, reject) {
      // @ts-ignore
      var request = new Request(input, init);

      if (request.signal && request.signal.aborted) {
        return reject(new (self as any).DOMException('Aborted', 'AbortError'))
      }

      var xhr = new XMLHttpRequest();

      function abortXhr() {
        xhr.abort();
      }

      xhr.onload = function () {
        var options = {
          status: xhr.status,
          statusText: xhr.statusText,
          headers: parseHeaders(xhr.getAllResponseHeaders() || '')
        };
        (options as any).url = 'responseURL' in xhr ? xhr.responseURL : options.headers.get('X-Request-URL');
        var body = 'response' in xhr ? xhr.response : (xhr as any).responseText;
        // @ts-ignore
        resolve(new Response(body, options));
      };

      xhr.onerror = function () {
        reject(new TypeError('Network request failed'));
      };

      xhr.ontimeout = function () {
        reject(new TypeError('Network request failed'));
      };

      xhr.onabort = function () {
        reject(new (self as any).DOMException('Aborted', 'AbortError'));
      };

      xhr.open(request.method, request.url, true);

      if (request.credentials === 'include') {
        xhr.withCredentials = true;
      } else if (request.credentials === 'omit') {
        xhr.withCredentials = false;
      }

      if ('responseType' in xhr && support.blob) {
        xhr.responseType = 'blob';
      }

      request.headers.forEach(function (value: any, name: any) {
        xhr.setRequestHeader(name, value);
      });

      if (request.signal) {
        request.signal.addEventListener('abort', abortXhr);

        xhr.onreadystatechange = function () {
          // DONE (success or failure)
          if (xhr.readyState === 4) {
            request.signal.removeEventListener('abort', abortXhr);
          }
        };
      }

      xhr.send(typeof request._bodyInit === 'undefined' ? null : request._bodyInit);
    })
  }

  fetch.polyfill = true;

  if (!self.fetch) {
    (self as any).fetch = fetch;
    (self as any).Headers = Headers;
    (self as any).Request = Request;
    (self as any).Response = Response;
  }
})();

export enum AvoEnv {
  Prod = "prod",
  Staging = "staging",
  Dev = "dev",
}

// @ts-ignore
interface AvoAssertMessage {
  eventName?: string;
  tag?: string;
  propertyId?: string;
  message?: string;
  additionalProperties?: string[],
  shape?: object,
  shapeUserProps?: object,
  actualType?: string
}

let __AVO_ENV__: AvoEnv | null = null;
// @ts-ignore
let __AVO_NOOP__: boolean = false;
// @ts-ignore
let __STRICT__: boolean | null = null;
// @ts-ignore
let __REPORT_FAILURE_AS__: 'error' | 'warn' | 'log' | null = null;

// @ts-ignore
let __WEB_DEBUGGER__: boolean = true;

// polyfill Object.assign
// @ts-ignore
declare interface ObjectConstructor {
  assign: any;
}
// @ts-ignore
if (typeof Object.assign !== 'function') {
  // Must be writable: true, enumerable: false, configurable: true
  Object.defineProperty(Object, "assign", {
    value: function assign(target: any, _varArgs: any) { // .length of function is 2
      if (target == null) { // TypeError if undefined or null
        throw new TypeError('Cannot convert undefined or null to object');
      }

      var to = Object(target);

      for (var index = 1; index < arguments.length; index++) {
        var nextSource = arguments[index];

        if (nextSource != null) { // Skip over if undefined or null
          for (var nextKey in nextSource) {
            // Avoid bugs when hasOwnProperty is shadowed
            if (Object.prototype.hasOwnProperty.call(nextSource, nextKey)) {
              to[nextKey] = nextSource[nextKey];
            }
          }
        }
      }
      return to;
    },
    writable: true,
    configurable: true
  });
}

var array_difference: any;
var AvoAssert: any;
var AvoLogger: any;
  array_difference = function array_difference(a1: any[], a2: any[]) {
    var result: any[] = [];
    for (var i = 0; i < a1.length; i++) {
      if (a2.indexOf(a1[i]) === -1) {
        result.push(a1[i]);
      }
    }
    return result;
  }

AvoAssert = {
  assertObject: function assertObject(propertyId: string, propName: string, obj: object) {
    if (typeof obj !== 'object') {
      let message = propName +
          ' should be of type object but you provided type ' +
          typeof obj +
          ' with value ' +
          JSON.stringify(obj);
      return [{tag: 'expectedObjectType', propertyId, message, actualType: typeof obj}];
    } else {
      return [];
    }
  },

  assertString: function assertString(propertyId: string, propName: string, str: string) {
    if (typeof str !== 'string') {
      let message = propName +
          ' should be of type string but you provided type ' +
          typeof str +
          ' with value ' +
          JSON.stringify(str);
      return [{tag: 'expectedStringType', propertyId, message, actualType: typeof str}];
    } else {
      return [];
    }
  },

  assertInt: function assertInt(propertyId: string, propName: string, int: number) {
    if (typeof int === 'number' && int !== Math.round(int)) {
      let message = propName +
          ' should be of type int but you provided type float with value ' +
          JSON.stringify(int);
      return [{tag: 'expectedIntType', propertyId, message, actualType: 'float'}];
    } else if (typeof int !== 'number') {
      let message = propName +
          ' should be of type int but you provided type ' +
          typeof int +
          ' with value ' +
          JSON.stringify(int);
      return [{tag: 'expectedIntType', propertyId, message, actualType: typeof int}];
    } else {
      return [];
    }
  },

  assertLong: function assertLong(propertyId: string, propName: string, long: number) {
    if (typeof long === 'number' && long !== Math.round(long)) {
      let message = propName +
          ' should be of type long but you provided type float with value ' +
          JSON.stringify(long);
      return [{tag: 'expectedLongType', propertyId, message, actualType: 'float'}];
    } else if (typeof long !== 'number') {
      let message = propName +
          ' should be of type long but you provided type ' +
          typeof long +
          ' with value ' +
          JSON.stringify(long);
      return [{tag: 'expectedLongType', propertyId, message, actualType: typeof long}];
    } else {
      return [];
    }
  },

  assertFloat: function assertFloat(propertyId: string, propName: string, float: number) {
    if (typeof float !== 'number') {
      let message = propName +
          ' should be of type float but you provided type ' +
          typeof float +
          ' with value ' +
          JSON.stringify(float);
      return [{tag: 'expectedFloatType', propertyId, message, actualType: typeof float}];
    } else {
      return [];
    }
  },

  assertBool: function assertBool(propertyId: string, propName: string, bool: boolean) {
    if (typeof bool !== 'boolean') {
      let message = propName +
          ' should be of type boolean but you provided type ' +
          typeof bool +
          ' with value ' +
          JSON.stringify(bool);
      return [{tag: 'expectedBoolType', propertyId, message, actualType: typeof bool}];
    } else {
      return [];
    }
  },

  assertMax: function assertMax(
    propertyId: string,
    propName: string,
    max: number,
    value: number
  ) {
    if (value > max) {
      let message = propName +
        ' has a maximum value of ' +
        max +
        ' but you provided the value ' +
        JSON.stringify(value);
      return [{tag: 'expectedMax', propertyId, message}];
    } else {
      return [];
    }
  },

  assertMin: function assertMin(
    propertyId: string,
    propName: string,
    min: number,
    value: number
  ) {
    if (value < min) {
      let message = propName +
        ' has a minimum value of ' +
        min +
        ' but you provided the value ' +
        JSON.stringify(value);
      return [{tag: 'expectedMin', propertyId, message}];
    } else {
      return [];
    }
  },

  assertList: function assertList(propertyId: string, propName: string, value: any) {
    if (!Array.isArray(value)) {
      let message = propName + ' should be of type list but you provided type ' + typeof value;
      return [{tag: 'expectedList', propertyId, message}];
    } else {
      return [];
    }
  },

  assertNoAdditionalProperties: function assertNoAdditionalProperties(eventName: string, input: string[], spec: string[]) {
    var additionalKeys = array_difference(input, spec);
    if (additionalKeys.length) {
      var message = "Additional properties when sending event " + eventName + ": " + JSON.stringify(additionalKeys);
      return [{tag: 'expectedNoAdditionalProperties', additionalProperties: additionalKeys, message: message}];
    } else {
      return [];
    }
  },

  assertNoAdditionalUserProperties: function assertNoAdditionalProperties(eventName: string, input: string[], spec: string[]) {
    var additionalKeys = array_difference(input, spec);
    if (additionalKeys.length) {
      var message = "Additional user properties when sending event " + eventName + ": " + JSON.stringify(additionalKeys);
      return [{tag: 'expectedNoAdditionalUserProperties', additionalProperties: additionalKeys, message: message}];
    } else {
      return [];
    }
  },
};

AvoLogger = {
  logEventSent: function logEventSent(
    eventName: string,
    eventProperties: any,
    userProperties: any
  ): void {
    console.log(
      '[avo] Event Sent:',
      eventName,
      'Event Props:',
      eventProperties,
      'User Props:',
      userProperties
    );
  }
};

var _avo_invoke: any;
var _avo_invoke_meta: any;
let _avo_sampling_rate = 1.0;
_avo_invoke = function _avo_invoke(env: string, eventId: string, hash: string, messages: {tag: string, propertyId: string}[], origin: string) {
  // @ts-ignore
  if (typeof (window as any) === 'undefined') { return; }
  if (_avo_sampling_rate > 0) {
    if (Math.random() < _avo_sampling_rate) {
      // @ts-ignore
      fetch("https://api.avo.app/i", {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify({
          "ac": "dFDb763a2CzOxJUZ2lQY",
          "br": "pMoqiMzpS",
          "en": env,
          "ev": eventId,
          "ha": hash,
          "sc": "fwtXqAc0fCLy7b7oGW40",
          "se": (new Date()).toISOString(),
          "so": "0j7LzMlx1",
          "va": messages.length === 0,
          "me": messages,
          "or": origin
        })
      }).then(function(res: any) { return res.json(); }).then(function(data: any) { _avo_sampling_rate = data.sa; }).catch(function() {});
    }
  }
}

_avo_invoke_meta = function _avo_invoke_meta(env: string, type: string, messages: {tag: string, propertyId: string}[], origin: string) {
  // @ts-ignore
  if (typeof (window as any) === 'undefined') { return; }
  if (_avo_sampling_rate > 0) {
    if (Math.random() < _avo_sampling_rate) {
      // @ts-ignore
      fetch("https://api.avo.app/i", {
        method: "POST",
        headers: {"Content-Type": "application/json"},
        body: JSON.stringify({
          "ac": "dFDb763a2CzOxJUZ2lQY",
          "br": "pMoqiMzpS",
          "en": env,
          "ty": type,
          "sc": "fwtXqAc0fCLy7b7oGW40",
          "se": (new Date()).toISOString(),
          "so": "0j7LzMlx1",
          "va": messages.length === 0,
          "me": messages,
          "or": origin
        })
      }).then(function(res: any) { return res.json(); }).then(function(data: any) { _avo_sampling_rate = data.sa; }).catch(function() {});
    }
  }
}


var _avo_debugger_log: any;
var _avo_debugger_events_during_boot: any = [];
var _avo_debugger_ready = false;

if (typeof (window as any) !== 'undefined') {
  window.addEventListener("message", function(event) {
    if (event.origin !== "https://www.avo.app") {
      return;
    }
    var iframe: any = document.getElementById("avo-debugger");
    if (iframe && event && event.data && event.data.type_ === "avo-debugger-update-style") {
      iframe.style = event.data.style;
    } else if (iframe && event && event.data && event.data.type_ === "avo-debugger-ready") {
      var message = {
        type_: "avo-debugger-boot-events",
        schemaId: "fwtXqAc0fCLy7b7oGW40",
        href: window.location.href,
        events: _avo_debugger_events_during_boot
      };
      _avo_debugger_events_during_boot = [];
      _avo_debugger_ready = true;
      iframe.contentWindow.postMessage(message, "https://www.avo.app/_debugger")
    }
  });
}

_avo_debugger_log = function _avo_debugger_log(eventId: string, eventName: string, messages: any[], eventProperties: any[], userProperties: any[]) {
  if (typeof (window as any) === 'undefined') { return; }
  var event = {
    eventId: eventId,
    eventName: eventName,
    messages: messages,
    timestamp: Date.now(),
    eventProperties,
    userProperties
  };

  if (_avo_debugger_ready) {
    var message = {type_: "avo-debugger-events", events: [event]};
    (document.getElementById("avo-debugger") as any).contentWindow.postMessage(message, "https://www.avo.app/_debugger")
  } else {
    _avo_debugger_events_during_boot.push(event);
  }
}


// @ts-ignore
interface Window {
  amplitude: any;
}

let Amplitude = {
  make: function make(apiKey: string, options: any) {
    if (typeof (window as any) === 'undefined') { console.warn('window.amplitude is not available in Node.js'); return; }
    if (typeof (window as any).amplitude === "undefined") {
      // @ts-ignore
      (function(e,t){var n=e.amplitude||{_q:[],_iq:{}};var r=t.createElement("script");r.type="text/javascript";r.async=true;r.src="https://cdn.amplitude.com/libs/amplitude-4.4.0-min.gz.js";r.onload=function(){if(e.amplitude.runQueuedFunctions){e.amplitude.runQueuedFunctions()}else{console.log("[Amplitude] Error: could not load SDK")}};var i=t.getElementsByTagName("script")[0];i.parentNode.insertBefore(r,i);function s(e,t){e.prototype[t]=function(){this._q.push([t].concat(Array.prototype.slice.call(arguments,0)));return this}}var o=function(){this._q=[];return this};var a=["add","append","clearAll","prepend","set","setOnce","unset"];for(var u=0;u<a.length;u++){s(o,a[u])}n.Identify=o;var c=function(){this._q=[];return this};var l=["setProductId","setQuantity","setPrice","setRevenueType","setEventProperties"];for(var p=0;p<l.length;p++){s(c,l[p])}n.Revenue=c;var d=["init","logEvent","logRevenue","setUserId","setUserProperties","setOptOut","setVersionName","setDomain","setDeviceId","setGlobalUserProperties","identify","clearUserProperties","setGroup","logRevenueV2","regenerateDeviceId","logEventWithTimestamp","logEventWithGroups","setSessionId","resetSessionId"];function v(e){function t(t){e[t]=function(){e._q.push([t].concat(Array.prototype.slice.call(arguments,0)))}}for(var n=0;n<d.length;n++){t(d[n])}}v(n);n.getInstance=function(e){e=(!e||e.length===0?"$default_instance":e).toLowerCase();if(!n._iq.hasOwnProperty(e)){n._iq[e]={_q:[]};v(n._iq[e])}return n._iq[e]};e.amplitude=n})(window,document);
    }
    (this as any).getInstance = () => (window as any).amplitude.getInstance(apiKey);
    (this as any).getInstance().init(apiKey, null, options);
  },

  logEvent: function logEvent(eventName: any, eventProperties: any) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().logEvent(eventName, eventProperties);
  },

  setUserProperties: function setUserProperties(userProperties: any) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().setUserProperties(userProperties);
  },

  setUserPropertyOnce: function setUserPropertyOnce(propertyName: any, propertyValue: any) {
    if (typeof (window as any) === 'undefined') { return; }
    let identify = new (window as any).amplitude.Identify().setOnce(propertyName, propertyValue);
    (this as any).getInstance().identify(identify);
  },

  identify: function identify(userId: any) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().setUserId(userId);
  },

  /* @see https://developers.amplitude.com/#tracking-revenue */
  revenue: function revenue(productId: any, quantity: any, price: any, revenueType: any, eventProperties: any) {
    if (typeof (window as any) === 'undefined') { return; }
    let revenue = new (window as any).amplitude.Revenue().setQuantity(quantity).setPrice(price);
    if (productId !== null && productId !== undefined && productId.length !== 0) {
      revenue.setProductId(productId);
    }
    if (
      revenueType !== null &&
      revenueType !== undefined &&
      revenueType.length !== 0
    ) {
      revenue.setRevenueType(revenueType);
    }
    if (eventProperties !== null && eventProperties !== undefined) {
      revenue.setEventProperties(eventProperties);
    }

    (this as any).getInstance().logRevenueV2(revenue);
  },

  unidentify: function unidentify() {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().setUserId(null);
    (this as any).getInstance().regenerateDeviceId();
  },
};

// @ts-ignore
interface Window {
  analytics: any;
}

let Segment = {
  make: function make(apiKey: string, options: any) {
    if (typeof (window as any) === 'undefined') { console.warn('window.analytics is not available in Node.js'); return; }
    var analytics = ((window as any).analytics = (window as any).analytics || []);

    (this as any).getInstance = () => (window as any).analytics;
    if (analytics.initialize) return;
    if (analytics.invoked) {
      if (window.console && console.error) {
        console.error('Segment snippet included twice.');
      }
      return;
    }
    analytics.invoked = true;
    analytics.methods = [
      'trackSubmit',
      'trackClick',
      'trackLink',
      'trackForm',
      'pageview',
      'identify',
      'reset',
      'group',
      'track',
      'ready',
      'alias',
      'debug',
      'page',
      'once',
      'off',
      'on'
    ];
    analytics.factory = function(method: any){
      return function(){
        var args = Array.prototype.slice.call(arguments);
        args.unshift(method);
        analytics.push(args);
        return analytics;
      };
    };
    for (var i = 0; i < analytics.methods.length; i++) {
      var key = analytics.methods[i];
      analytics[key] = analytics.factory(key);
    }
    analytics.load = function(key: any, options: any){
      var script = document.createElement('script');
      script.type = 'text/javascript';
      script.async = true;
      script.src = 'https://cdn.segment.com/analytics.js/v1/'
        + key + '/analytics.min.js';
      var first = document.getElementsByTagName('script')[0];
      // @ts-ignore
      first.parentNode.insertBefore(script, first);
      analytics._loadOptions = options;
    };
    analytics.SNIPPET_VERSION = '4.1.0';

    analytics.load(apiKey, options);

    (this as any).getInstance = () => (window as any).analytics;
  },

  /* Segment does not have revenue api, @see https://segment.com/docs/spec/track/#properties */
  logEvent: function logEvent(eventName: any, eventProperties: any, integrations: any) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().track(eventName, eventProperties, Object.assign({}, {integrations: integrations}));
  },

  setUserProperties: function setUserProperties(userProperties: any, integrations: any) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().identify(userProperties, Object.assign({}, {integrations: integrations}));
  },

  identify: function identify(userId: any, integrations: any) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().identify(userId, {}, Object.assign({}, {integrations: integrations}));
  },

  unidentify: function unidentify(integrations: any) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().identify(null, {}, Object.assign({}, {integrations: integrations}));
  },

  page: function page(eventName: any, eventProperties: any, integrations: any) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().page(eventName, eventProperties, Object.assign({}, {integrations: integrations}));
  },
};

// @ts-ignore
interface Window {
  mixpanel: any;
}

let Mixpanel = {
  make: function make(apiKey: string, options: any) {
    if (typeof (window as any) === 'undefined') { console.warn('window.mixpanel is not available in Node.js'); return; }
    if (typeof (window as any).mixpanel === "undefined") {
      // @ts-ignore
      (function(e,a){if(!a.__SV){var b=window;try{var c,l,i,j=b.location,g=j.hash;c=function(a,b){return(l=a.match(RegExp(b+"=([^&]*)")))?l[1]:null};g&&c(g,"state")&&(i=JSON.parse(decodeURIComponent(c(g,"state"))),"mpeditor"===i.action&&(b.sessionStorage.setItem("_mpcehash",g),history.replaceState(i.desiredHash||"",e.title,j.pathname+j.search)))}catch(m){}var k,h;(window as any).mixpanel=a;a._i=[];a.init=function(b,c,f){function e(b,a){var c=a.split(".");2==c.length&&(b=b[c[0]],a=c[1]);b[a]=function(){b.push([a].concat(Array.prototype.slice.call(arguments,
      // @ts-ignore
      0)))}}var d=a;"undefined"!==typeof f?d=a[f]=[]:f="mixpanel";d.people=d.people||[];d.toString=function(b){var a="mixpanel";"mixpanel"!==f&&(a+="."+f);b||(a+=" (stub)");return a};d.people.toString=function(){return d.toString(1)+".people (stub)"};k="disable time_event track track_pageview track_links track_forms register register_once alias unregister identify name_tag set_config reset opt_in_tracking opt_out_tracking has_opted_in_tracking has_opted_out_tracking clear_opt_in_out_tracking people.set people.set_once people.unset people.increment people.append people.union people.track_charge people.clear_charges people.delete_user".split(" ");
      // @ts-ignore
      for(h=0;h<k.length;h++)e(d,k[h]);a._i.push([b,c,f])};a.__SV=1.2;b=e.createElement("script");b.type="text/javascript";b.async=!0;b.src="undefined"!==typeof MIXPANEL_CUSTOM_LIB_URL?MIXPANEL_CUSTOM_LIB_URL:"file:"===e.location.protocol&&"//cdn4.mxpnl.com/libs/mixpanel-2-latest.min.js".match(/^\/\//)?"https://cdn4.mxpnl.com/libs/mixpanel-2-latest.min.js":"//cdn4.mxpnl.com/libs/mixpanel-2-latest.min.js";c=e.getElementsByTagName("script")[0];c.parentNode.insertBefore(b,c)}})(document,(window as any).mixpanel||[]);
    }
    (this as any).getInstance = () => (window as any).mixpanel;
    (this as any).getInstance().init(apiKey, options);
  },

  logEvent: function logEvent(eventName: string, eventProperties: {[name: string] : any}) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().track(eventName, eventProperties);
  },

  setUserProperties: function setUserProperties(userProperties: {[name: string] : any}) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().people.set(userProperties);
  },

  identify: function identify(userId: string) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().identify(userId);
  },

  /* @see https://mixpanel.com/help/reference/javascript-full-api-reference#mixpanel.people.track_charge */
  revenue: function revenue(amount: Number, eventProperties: {[name: string] : any}) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().people.track_charge(amount, eventProperties);
  },

  unidentify: function unidentify() {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().reset();
  },
};

// @ts-ignore
interface Window {
  FS: any;
}

let Fullstory = {
  make: function make(apiKey: string, options: any) {
    if (typeof (window as any) === 'undefined') { console.warn('window.FS is not available in Node.js'); return; }
    if (typeof (window as any).FS === "undefined") {
      (window as any)['_fs_debug'] = false;
      (window as any)['_fs_host'] = 'fullstory.com';
      (window as any)['_fs_org'] = apiKey;
      (window as any)['_fs_namespace'] = 'FS';
      // @ts-ignore
      (function(m,n,e,t,l,o,g,y){
        // @ts-ignore
        if (e in m) {if(m.console && m.console.log) { m.console.log('FullStory namespace conflict. Please set window["_fs_namespace"].');} return;}
        // @ts-ignore
        g=m[e]=function(a,b,s){g.q?g.q.push([a,b,s]):g._api(a,b,s);};g.q=[];
        // @ts-ignore
        o=n.createElement(t);o.async=1;o.src='https://'+window['_fs_host']+'/s/fs.js';
        // @ts-ignore
        y=n.getElementsByTagName(t)[0];y.parentNode.insertBefore(o,y);
        // @ts-ignore
        g.identify=function(i,v,s){g(l,{uid:i},s);if(v)g(l,v,s)};g.setUserVars=function(v,s){g(l,v,s)};g.event=function(i,v,s){g('event',{n:i,p:v},s)};
        // @ts-ignore
        g.shutdown=function(){g("rec",!1)};g.restart=function(){g("rec",!0)};
        // @ts-ignore
        g.consent=function(a){g("consent",!arguments.length||a)};
        // @ts-ignore
        g.identifyAccount=function(i,v){o='account';v=v||{};v.acctId=i;g(o,v)};
        // @ts-ignore
        g.clearUserCookie=function(){};
        // @ts-ignore
      })(window,document,window['_fs_namespace'],'script','user');
    }
    (this as any).getInstance = () => (window as any).FS;
  },

  logEvent: function logEvent(eventName: string, eventProperties: any) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().event(eventName, eventProperties);
  },

  setUserProperties: function setUserProperties(userProperties: any) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().setUserVars(userProperties);
  },

  identify: function identify(userId: string) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().identify(userId);
  },

  unidentify: function unidentify() {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance().identify(false);
    // TODO Restart here with api key
  },
};

// @ts-ignore
interface Window {
  Intercom: any;
}

let Intercom = {
  make: function make(apiKey: string, options: any) {
    if (typeof (window as any) === 'undefined') { console.warn('window.Intercom is not available in Node.js'); return; }
    options = options || {};
    options = Object.assign(options, {app_id: apiKey});
    // @ts-ignore
    if (typeof (window as any).Intercom === "undefined") {
      // @ts-ignore
      (function(){var w=window;var ic=w.Intercom;if(typeof ic==="function"){ic('reattach_activator');ic('update',intercomSettings);}else{var d=document;var i=function(){i.c(arguments)};i.q=[];i.c=function(args){i.q.push(args)};w.Intercom=i;function l(){var s=d.createElement('script');s.type='text/javascript';s.async=true;s.src='https://widget.intercom.io/widget/APP_ID';var x=d.getElementsByTagName('script')[0];x.parentNode.insertBefore(s,x);}if(w.attachEvent){w.attachEvent('onload',l);}else{w.addEventListener('load',l,false);}}})();
      // @ts-ignore
      (window as any).Intercom("boot", options);
    }
    (this as any).getInstance = () => (window as any).Intercom;
  },

  logEvent: function logEvent(eventName: any, eventProperties: any) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance()("trackEvent", eventName, eventProperties);
  },

  setUserProperties: function setUserProperties(userProperties: any) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance()('update', userProperties);
  },

  identify: function identify(userId: any) {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance()('update', {"user_id": userId});
  },

  unidentify: function unidentify() {
    if (typeof (window as any) === 'undefined') { return; }
    (this as any).getInstance()('shutdown');
    // TODO restart intercom
  },
};

export const Client = {
  'CLOUD_FUNCTIONS': 'Cloud Functions',
  'WEB': 'Web',
  'LANDING_PAGE': 'Landing Page',
  'CLI': 'Cli',
  'WEB_DEBUGGER': 'Web Debugger',
  'ANDROID_DEBUGGER': 'Android Debugger',
  'IOS_DEBUGGER': 'Ios Debugger',
  'REACT_NATIVE_DEBUGGER_IOS': 'React Native Debugger (ios)',
  'REACT_NATIVE_DEBUGGER_ANDROID': 'React Native Debugger (android)',
  'DOCS': 'Docs',
} as const;
export type ClientType = typeof Client;
export type ClientValueType = ClientType[keyof ClientType];

export const Feedback = {
  'HELPFUL': 'Helpful',
  'NOT_HELPFUL': 'Not Helpful',
} as const;
export type FeedbackType = typeof Feedback;
export type FeedbackValueType = FeedbackType[keyof FeedbackType];

let sysClient: any;
let sysVersion: any;

export function setSystemProperties(properties: {client: ClientValueType;
  version: string}) {
  if (properties.client !== null && properties.client !== undefined) {
    sysClient = properties.client;
  }
  if (properties.version !== null && properties.version !== undefined) {
    sysVersion = properties.version;
  }
}

export function initAvo(options: {env: AvoEnv; webDebugger?: boolean;
  strict?: boolean; noop?: boolean;
  reportFailureAs?: 'error' | 'warn' | 'log'},
  systemProperties: {client: ClientValueType; version: string},
  destinationOptions: any) {
  if (__AVO_ENV__ !== null) {
    return;
  }
  __AVO_ENV__ = options.env;
  if (options.noop === true) {
    __AVO_NOOP__ = true;
  }
  if (__AVO_NOOP__ && __AVO_ENV__ == AvoEnv.Prod) {
    console.warn("[avo] ****************************************************");
    console.warn("[avo] WARNING Avo cannot be initialized in noop mode in production:");
    console.warn("[avo] - Overwriting configuration with noop=false.");
    console.warn("[avo] - Please reach out if you want to be able to run Avo in production mode with noop=true");
    console.warn("[avo] ****************************************************");
    __AVO_NOOP__ = false;
  }
  if (__AVO_NOOP__) {
    console.log("[avo] ****************************************************");
    console.log("[avo] Avo is now initialized in noop mode. This means:");
    console.log("[avo] - No events will be sent");
    console.log("[avo] - No network requests are made");
    console.log("[avo] ****************************************************");
  }
  if (options.strict !== undefined) {
    __STRICT__ = options.strict !== false;
  }
  if (options.reportFailureAs !== undefined) {
    __REPORT_FAILURE_AS__ = options.reportFailureAs;
  }
  __WEB_DEBUGGER__ = !__AVO_NOOP__ && ((typeof window !== 'undefined' && (window as any).location.search.indexOf("avo_debug=1") > -1) || (options.webDebugger !== false && __AVO_ENV__ !== AvoEnv.Prod));

  setSystemProperties(systemProperties);

  destinationOptions = destinationOptions || {};

  if (__WEB_DEBUGGER__ && !__AVO_NOOP__) {
(function() {
  if (typeof (window as any) === 'undefined') { return; }
  var init = function() {
    var iframe: any = document.createElement("iframe");
    document.body.appendChild(iframe);
    iframe.id = "avo-debugger";
    iframe.src = "https://www.avo.app/_debugger";
    iframe.style = "display: none;";
  };

  if (document.body) {
    init();
  } else {
    document.addEventListener('DOMContentLoaded', init);
  }
})();

  }
  if (!__AVO_NOOP__) {
    if (__AVO_ENV__ === AvoEnv.Prod) {
      Amplitude.make("20a050881c2f99ed4850d73230fa1e31", destinationOptions.amplitude);
      Segment.make("Gt02cZdFC65QWZuJypDeWSHHVYZfZweo", destinationOptions.segment);
      Mixpanel.make("b22a20c38601eb0f14364e8cfdfaa415", destinationOptions.mixpanel);
      Fullstory.make("E2KTW", destinationOptions.fullstory);
      Intercom.make("q694k0ra", destinationOptions.intercom);
    }
    if (__AVO_ENV__ === AvoEnv.Dev) {
      Amplitude.make("78f0aa77e1de2125674e4703d5f21460", destinationOptions.amplitude);
      Segment.make("8bKQv9Ik8ooRtQTl3lFknKbKW9DQjf9S", destinationOptions.segment);
      Mixpanel.make("3d4e18198e980f120436a561cc7e2a1f", destinationOptions.mixpanel);
      Fullstory.make("KBA1X", destinationOptions.fullstory);
      Intercom.make("hc03k7sl", destinationOptions.intercom);
    }
    if (__AVO_ENV__ === AvoEnv.Staging) {
      Amplitude.make(
        "staging key",
        destinationOptions.amplitude
      );
      console[__REPORT_FAILURE_AS__ || 'error']("[avo] No staging key is set for segment. Head to destination settings in Avo to set a staging key.");
      Segment.make(
        "",
        destinationOptions.segment
      );
      console[__REPORT_FAILURE_AS__ || 'error']("[avo] No staging key is set for mixpanel. Head to destination settings in Avo to set a staging key.");
      Mixpanel.make(
        "",
        destinationOptions.mixpanel
      );
      console[__REPORT_FAILURE_AS__ || 'error']("[avo] No staging key is set for fullstory. Head to destination settings in Avo to set a staging key.");
      Fullstory.make(
        "",
        destinationOptions.fullstory
      );
      console[__REPORT_FAILURE_AS__ || 'error']("[avo] No staging key is set for Intercom. Head to destination settings in Avo to set a staging key.");
      Intercom.make(
        "",
        destinationOptions.intercom
      );
    }
    if (__AVO_ENV__ === AvoEnv.Dev) {
      // debug console in Avo
      _avo_invoke_meta(__AVO_ENV__, 'init', [], 'init');
    }
  }
}

export interface LandingPageViewedProperties {
  path: string;
  referrer: string | null | undefined;
  utmSource: string | null | undefined;
  utmMedium: string | null | undefined;
  utmContent: string | null | undefined;
  utmCampaign: string | null | undefined;
}
/**
 * Landing Page Viewed: Sent when user arrives to landing page.
 *
 * @param properties the properties associatied with this event
 * @param properties.path no description
 * @param properties.referrer no description
 * @param properties.utmSource Parsed from the link a user clicks to get to Avo.
 * @param properties.utmMedium Parsed from the link a user clicks to get to Avo
 * @param properties.utmContent Parsed from the link a user clicks to get to Avo
 * @param properties.utmCampaign Parsed from the link a user clicks to get to Avo.
 *
 * @see {@link https://www.avo.app/schemas/fwtXqAc0fCLy7b7oGW40/branches/pMoqiMzpS/events/16b000f3-8a78-4d99-baae-4c68c4829bfe}
 */
export function landingPageViewed(properties: LandingPageViewedProperties) {
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "16b000f3-8a78-4d99-baae-4c68c4829bfe", "7dacd77f3d17a1f981e0317e95570f63fbb1f742e8b30e8f41d7732df64c642b", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    AvoLogger.logEventSent("Landing Page Viewed", {
      "Path": properties.path,
      "UTM Source": properties.utmSource,
      "UTM Medium": properties.utmMedium,
      "UTM Content": properties.utmContent,
      "UTM Campaign": properties.utmCampaign,
      "Client": sysClient,
      "Version": sysVersion,
      }, {});
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("16b000f3-8a78-4d99-baae-4c68c4829bfe", "Landing Page Viewed", messages, [
      {id: "UT9ZlNsN2", name: "Path", value: properties.path},
      {id: "OLNULsfJZD", name: "UTM Source", value: properties.utmSource},
      {id: "wx_FcQt9oN", name: "UTM Medium", value: properties.utmMedium},
      {id: "-vBUKSLbCo", name: "UTM Content", value: properties.utmContent},
      {id: "wbB7aeGs47", name: "UTM Campaign", value: properties.utmCampaign},
      {id: "9e5c4ff5-d5f6-4e82-b061-d5fa02755aae", name: "Client", value: sysClient},
      {id: "2fad5bf3-7782-49a2-acc2-825daf823095", name: "Version", value: sysVersion},
      ], []);
    }
  }

  // @ts-ignore
  let eventProperties: any = {};
  eventProperties["Path"] = properties.path;
  if (properties.utmSource !== undefined && properties.utmSource !== null) {
    eventProperties["UTM Source"] = properties.utmSource;
  }
  if (properties.utmMedium !== undefined && properties.utmMedium !== null) {
    eventProperties["UTM Medium"] = properties.utmMedium;
  }
  if (properties.utmContent !== undefined && properties.utmContent !== null) {
    eventProperties["UTM Content"] = properties.utmContent;
  }
  if (properties.utmCampaign !== undefined && properties.utmCampaign !== null) {
    eventProperties["UTM Campaign"] = properties.utmCampaign;
  }
  eventProperties["Client"] = sysClient;
  eventProperties["Version"] = sysVersion;

  // @ts-ignore
  let userProperties: any = {};

  if (!__AVO_NOOP__) {
    // destination Amplitude
    if (properties.referrer !== undefined && properties.referrer !== null) {
      Amplitude.setUserPropertyOnce("Referrer", properties.referrer);
    }
    Amplitude.logEvent("Landing Page Viewed", (Object as any).assign({}, eventProperties));

    // destination Segment
    Segment.logEvent("Landing Page Viewed", (Object as any).assign({}, eventProperties), {});

    // destination Mixpanel
    Mixpanel.logEvent("Landing Page Viewed", (Object as any).assign({}, eventProperties));

    // destination Fullstory
    Fullstory.logEvent("Landing Page Viewed", (Object as any).assign({}, eventProperties));

    // destination Intercom
    let intercomProperties = {};
    Intercom.logEvent("Landing Page Viewed", (Object as any).assign({}, intercomProperties));
  } else {
    // do nothing
  }
}

export interface FeedbackGivenProperties {
  path: string;
  feedback: FeedbackValueType;
}
/**
 * Feedback Given: Sent when a user gives feedback on a documentation page
 *
 * @param properties the properties associatied with this event
 * @param properties.path no description
 * @param properties.feedback no description
 *
 * @see {@link https://www.avo.app/schemas/fwtXqAc0fCLy7b7oGW40/branches/pMoqiMzpS/events/35_wLFqR0}
 */
export function feedbackGiven(properties: FeedbackGivenProperties) {
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "35_wLFqR0", "b8f0d0d12a358bf6076e8551f9e8f40c235253e2a45267902e08d2c810b281d7", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    AvoLogger.logEventSent("Feedback Given", {
      "Path": properties.path,
      "Feedback": properties.feedback,
      "Client": sysClient,
      "Version": sysVersion,
      }, {});
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("35_wLFqR0", "Feedback Given", messages, [
      {id: "UT9ZlNsN2", name: "Path", value: properties.path},
      {id: "w9_17LDyAz", name: "Feedback", value: properties.feedback},
      {id: "9e5c4ff5-d5f6-4e82-b061-d5fa02755aae", name: "Client", value: sysClient},
      {id: "2fad5bf3-7782-49a2-acc2-825daf823095", name: "Version", value: sysVersion},
      ], []);
    }
  }

  // @ts-ignore
  let eventProperties: any = {};
  eventProperties["Path"] = properties.path;
  eventProperties["Feedback"] = properties.feedback;
  eventProperties["Client"] = sysClient;
  eventProperties["Version"] = sysVersion;

  // @ts-ignore
  let userProperties: any = {};

  if (!__AVO_NOOP__) {
    // destination Amplitude
    Amplitude.logEvent("Feedback Given", (Object as any).assign({}, eventProperties));

    // destination Segment
    Segment.logEvent("Feedback Given", (Object as any).assign({}, eventProperties), {});

    // destination Mixpanel
    Mixpanel.logEvent("Feedback Given", (Object as any).assign({}, eventProperties));

    // destination Fullstory
    Fullstory.logEvent("Feedback Given", (Object as any).assign({}, eventProperties));

    // destination Intercom
    let intercomProperties = {};
    Intercom.logEvent("Feedback Given", (Object as any).assign({}, intercomProperties));
  } else {
    // do nothing
  }
}

export interface ContentCopiedProperties {
  path: string;
  content: string | null | undefined;
}
/**
 * Content Copied: Called when a user copies text from the docs
 *
 * @param properties the properties associatied with this event
 * @param properties.path no description
 * @param properties.content no description
 *
 * @see {@link https://www.avo.app/schemas/fwtXqAc0fCLy7b7oGW40/branches/pMoqiMzpS/events/0FvnJgpVbz}
 */
export function contentCopied(properties: ContentCopiedProperties) {
  // assert properties
  if (__AVO_ENV__ !== AvoEnv.Prod || __WEB_DEBUGGER__) {
    let messages: AvoAssertMessage[] = [];
    // debug console in Avo
    if (!__AVO_NOOP__) {
      _avo_invoke(__AVO_ENV__, "0FvnJgpVbz", "ee3e599ef1957564b241b2aed491d23d2ed99946048bca72856dbb5105a83a35", messages.map(m => Object.assign({}, {tag: m.tag, propertyId: m.propertyId, additionalProperties: m.additionalProperties, actualType: m.actualType})), 'event');
    }
    AvoLogger.logEventSent("Content Copied", {
      "Path": properties.path,
      "Content": properties.content,
      "Client": sysClient,
      "Version": sysVersion,
      }, {});
    if (__WEB_DEBUGGER__) {
      // Avo web debugger
      _avo_debugger_log("0FvnJgpVbz", "Content Copied", messages, [
      {id: "UT9ZlNsN2", name: "Path", value: properties.path},
      {id: "ktIiFeiz3N", name: "Content", value: properties.content},
      {id: "9e5c4ff5-d5f6-4e82-b061-d5fa02755aae", name: "Client", value: sysClient},
      {id: "2fad5bf3-7782-49a2-acc2-825daf823095", name: "Version", value: sysVersion},
      ], []);
    }
  }

  // @ts-ignore
  let eventProperties: any = {};
  eventProperties["Path"] = properties.path;
  if (properties.content !== undefined && properties.content !== null) {
    eventProperties["Content"] = properties.content;
  }
  eventProperties["Client"] = sysClient;
  eventProperties["Version"] = sysVersion;

  // @ts-ignore
  let userProperties: any = {};

  if (!__AVO_NOOP__) {
    // destination Amplitude
    Amplitude.logEvent("Content Copied", (Object as any).assign({}, eventProperties));

    // destination Segment
    Segment.logEvent("Content Copied", (Object as any).assign({}, eventProperties), {});

    // destination Mixpanel
    Mixpanel.logEvent("Content Copied", (Object as any).assign({}, eventProperties));

    // destination Fullstory
    Fullstory.logEvent("Content Copied", (Object as any).assign({}, eventProperties));

    // destination Intercom
    let intercomProperties = {};
    Intercom.logEvent("Content Copied", (Object as any).assign({}, intercomProperties));
  } else {
    // do nothing
  }
}

export default {
  AvoEnv,
  initAvo,
  setSystemProperties,
  Client,
  Feedback,
  landingPageViewed,
  feedbackGiven,
  contentCopied,
}

// AVOMODULEMAP:"Avo"
// AVOEVENTMAP:["landingPageViewed","feedbackGiven","contentCopied"]
